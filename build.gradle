plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

repositories {
    mavenCentral()
}
dependencies {
    implementation "com.google.code.gson:gson:${gson_version}"
    implementation "org.pytorch:torchserve-plugins-sdk:${torchserve_sdk_version}"
    implementation "software.amazon.awssdk:s3:${awssdk_s3_version}"
    implementation "com.aliyun.oss:aliyun-sdk-oss:${aliyun_sdk_oss_version}"
    implementation "com.google.cloud:google-cloud-storage:${google_cloud_storage_version}"
    implementation "com.azure:azure-storage-blob:${azure_storage_blob_version}"
    implementation files(fileTree(dir: 'lib', include: '*.jar'))
}

project.ext{
    sagemaker = true
}

jar {
    includeEmptyDirs = false

    exclude "META-INF/maven/**"
    exclude "META-INF/INDEX.LIST"
    exclude "META-INF/MANIFEST*"
    exclude "META-INF//LICENSE*"
    exclude "META-INF//NOTICE*"
}

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4.1/userguide/java_library_plugin.html
 */

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'

    version = '1.0'

    repositories {
        jcenter()
    }

    idea {
        module {
            outputDir = file('build/classes/java/main')
            testOutputDir = file('build/classes/java/test')
        }
    }

    task buildSagemaker("type": Jar) {

        doFirst{ task ->
            println "building $task.project.name"
        }

        with project.jar

        doLast {
            copy {
                def fromDir = project.jar
                def intoDir = "${rootProject.projectDir}/build/plugins"
                from fromDir
                into intoDir
                println "Copying files from" + fromDir + " into " + intoDir
            }
        }
    }

    buildSagemaker.onlyIf {project.hasProperty("sagemaker")}
}

def javaProjects() {
    return subprojects.findAll()
}

configure(javaProjects()) {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    defaultTasks 'jar'

    apply from: file("${rootProject.projectDir}/tools/gradle/formatter.gradle")
    apply from: file("${rootProject.projectDir}/tools/gradle/check.gradle")

    test {
        useTestNG() {
            // suiteXmlFiles << new File(rootDir, "testng.xml") //This is how to add custom testng.xml
        }

        testLogging {
            showStandardStreams = true
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
    }

    test.finalizedBy(project.tasks.jacocoTestReport)

    compileJava {
        options.compilerArgs << "-Xlint:all,-options,-static" << "-Werror"
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.75
                }
            }
        }
    }
}

